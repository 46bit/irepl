#!/usr/bin/env ruby

require 'socket'
require 'eventmachine'
require 'timeout'
require './lib/irepl'

def log str; puts "#{Process.pid} #{str}"; end

IREPL_INST = REPL.new

module REPLServer
  def post_init
    @replstate = :who
    @exp = ""
  end
  
  def receive_data data
    case @replstate
    when :who
      @who = data.lines.first.chomp
      @replstate = :len
      rest_lines data
    when :len
      @len = data.lines.first.chomp.to_i
      @replstate = :exp
      rest_lines data
    when :exp
      @exp << data
      if @exp.bytesize >= @len
        Thread.new do
          res = '**unknown**'
          Timeout::timeout(15) do
            begin
              res = IREPL_INST.eval_for @who, @exp[0...@len]
            rescue Timeout::Error
              res = '***TIMEOUT***'
            rescue Exception
              res = '***ERROR***'
            end
          end
          puts "#@who #@len #{res.bytesize}"
          send_data "#{res.bytesize}\n#{res}"
        end
      end
    end
  end
  
  def rest_lines data
    rest = data.lines.to_a[1..-1].join
    unless rest.empty?
      receive_data rest
    end
  end
  
  def unbind
  end
end

EventMachine::run do
  EventMachine::start_unix_domain_server '/tmp/irepl.sock', REPLServer
end
