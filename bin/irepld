#!/usr/bin/env ruby

# encoding: utf-8

require 'open3'
require 'socket'
require 'eventmachine'
require 'timeout'
require './lib/irepl'

def log str; puts "#{Process.pid} #{str}"; end

IREPL_INST = REPL.new

module REPLServer
  def post_init
    @replstate = :who
    @exp = ""
  end
  
  def receive_data data
    case @replstate
    when :who
      @who = data.lines.first.chomp
      @replstate = :len
      rest_lines data
    when :len
      @len = data.lines.first.chomp.to_i
      @replstate = :exp
      rest_lines data
    when :exp
      @exp << data
      if @exp.bytesize >= @len
        Thread.new do
          res = '**unknown**'
          exp_raw = @exp.gsub(/\n|\r/, "")
          if exp_raw == "?" || exp_raw == "help"
            res = "Welcome to iREPL\n"
            res += "Enter Scheme code to use it, for instance (+ 5 4).\n"
            res += "For more on Scheme see https://www.google.com/search?q=scheme%20tutorial"
            res += "For more on iREPL see http://irepl.im"
          else
            Timeout::timeout(15) do
              begin
                res = IREPL_INST.eval_for @who, @exp.force_encoding("UTF-8").gsub("\u00A0", " ")
              rescue Timeout::Error
                res = '***TIMEOUT***'
              rescue Exception
                res = '***ERROR***'
              end
            end
          end
          
          Open3.popen2('/usr/local/bin/irepl-send', @who) do |i, o|
            i.print res
            i.close
            o.read
          end
          puts "#@who #@len #{res.bytesize}"
        end
      end
    end
  end
  
  def rest_lines data
    rest = data.lines.to_a[1..-1].join
    unless rest.empty?
      receive_data rest
    end
  end
  
  def unbind
  end
end

EventMachine::run do
  EventMachine::start_unix_domain_server '/tmp/irepl.sock', REPLServer
end
